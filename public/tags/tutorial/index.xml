<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on David Nix&#39;s Blog - Tutorials, Opinions, Rants</title>
    <link>https://davidnix.io/tags/tutorial/</link>
    <description>Recent content in Tutorial on David Nix&#39;s Blog - Tutorials, Opinions, Rants</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Nov 2015 07:27:48 -0700</lastBuildDate>
    <atom:link href="https://davidnix.io/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building Modern Web Apps in Go Part 2</title>
      <link>https://davidnix.io/post/building-modern-web-apps-in-go-part-2/</link>
      <pubDate>Thu, 19 Nov 2015 07:27:48 -0700</pubDate>
      
      <guid>https://davidnix.io/post/building-modern-web-apps-in-go-part-2/</guid>
      <description>&lt;p&gt;This was a presentation I gave at the Denver Go Meetup in November 2015.&lt;/p&gt;

&lt;p&gt;My goal is to teach others and myself how to build a robust, modern web application in Go. My hope is that startups will turn to Go instead of Rails or Django when building web apps.&lt;/p&gt;

&lt;p&gt;What is a “modern web app”?  It’s a server that does all this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;Middleware&lt;/li&gt;
&lt;li&gt;Request Scoped Data&lt;/li&gt;
&lt;li&gt;User Authentication&lt;/li&gt;
&lt;li&gt;Interfaces with a database&lt;/li&gt;
&lt;li&gt;Compiles js, csss, images and other assets&lt;/li&gt;
&lt;li&gt;Renders templates and views&lt;/li&gt;
&lt;li&gt;Serves static files&lt;/li&gt;
&lt;li&gt;Shuts down gracefully&lt;/li&gt;
&lt;li&gt;Sends transactional email&lt;/li&gt;
&lt;li&gt;Live reloading&lt;/li&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt;  This is an exploration. I am not an expert on the subject. I’ve built microservices in Go but have yet to build a monolith similar to Rails or Django.&lt;/p&gt;

&lt;p&gt;This is the first in a multi-part series.  How many parts?  I’m not sure yet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://davidnix.io/post/building-modern-web-apps-in-go-part-1&#34;&gt;Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Part 2 (you’re reading it)&lt;/p&gt;

&lt;p&gt;I welcome any feedback or criticism.&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34;
data-id=&#34;fbc89f873cb8493998f341c8dc0c16d6&#34; data-ratio=&#34;1.77777777777778&#34;
src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Building Modern Web Apps in Go Part 1</title>
      <link>https://davidnix.io/post/building-modern-web-apps-in-go-part-1/</link>
      <pubDate>Thu, 24 Sep 2015 06:59:45 -0700</pubDate>
      
      <guid>https://davidnix.io/post/building-modern-web-apps-in-go-part-1/</guid>
      <description>&lt;p&gt;This was a presentation I gave at the Denver Go Meetup in September 2015.&lt;/p&gt;

&lt;p&gt;My goal is to teach others and myself how to build a robust, modern web application in Go. My hope is that startups will turn to Go instead of Rails or Django when building web apps.&lt;/p&gt;

&lt;p&gt;What is a “modern web app”?  It’s a server that does all this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;Middleware&lt;/li&gt;
&lt;li&gt;Request Scoped Data&lt;/li&gt;
&lt;li&gt;User Authentication&lt;/li&gt;
&lt;li&gt;Interfaces with a database&lt;/li&gt;
&lt;li&gt;Compiles js, csss, images and other assets&lt;/li&gt;
&lt;li&gt;Renders templates and views&lt;/li&gt;
&lt;li&gt;Serves static files&lt;/li&gt;
&lt;li&gt;Shuts down gracefully&lt;/li&gt;
&lt;li&gt;Sends transactional email&lt;/li&gt;
&lt;li&gt;Live reloading&lt;/li&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt;  This is an exploration. I am not an expert on the subject. I’ve built microservices in Go but have yet to build a monolith similar to Rails or Django.&lt;/p&gt;

&lt;p&gt;This is the first in a multi-part series.  How many parts?  I’m not sure yet.&lt;/p&gt;

&lt;p&gt;Part 1 (you’re reading it)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://davidnix.io/post/building-modern-web-apps-in-go-part-2&#34;&gt;Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt;  I make fun of Rails a LOT.  On purpose.  If you’re BFFs with DHH, consider yourself warned.&lt;/p&gt;

&lt;p&gt;I welcome any feedback or criticism.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/DavidNix/modern-web-apps-in-go&#34;&gt;View the sample code here.&lt;/a&gt;&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34;
data-id=&#34;91a1a570e652473f8247b7668c4ebaa5&#34; data-ratio=&#34;1.77777777777778&#34;
src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>